//*********************************************
//  This is auto generated by G4gen 0.6
//                                  author:Qian


#include "G4UIdirectory.hh"
#include "G4UIcmdWithAString.hh"
#include "G4UIcmdWithADoubleAndUnit.hh"
#include "G4UIcmdWithoutParameter.hh"
#include "G4UIcmdWithADouble.hh"
#include "Verbose.hh"

#include "MyDetectorMessenger.hh"
#include "MyDetectorConstruction.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

MyDetectorMessenger::MyDetectorMessenger(MyDetectorConstruction *Det)
    : G4UImessenger(),
      fDetectorConstruction(Det)
{
  if (verbose)
    G4cout << "====>MyDetectorMessenger::MyDetectorMessenger(MyDetectorConstruction *Det)" << G4endl;

  fMyDirectory = new G4UIdirectory("/MySimulation/");
  fMyDirectory->SetGuidance("UI commands specific to this example.");

  fDetDirectory = new G4UIdirectory("/MySimulation/det/");
  fDetDirectory->SetGuidance("Detector construction control");

  fWorldMatCmd = new G4UIcmdWithAString("/MySimulation/det/setWorldMaterial", this);
  fWorldMatCmd->SetGuidance("Select Material of the World.");
  fWorldMatCmd->SetParameterName("choice", false);
  fWorldMatCmd->AvailableForStates(G4State_PreInit, G4State_Idle);

  fWorldSizeXCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWorldX", this);
  fWorldSizeXCmd->SetUnitCategory("Length");
  fWorldSizeXCmd->SetParameterName("WorldX", false);
  fWorldSizeXCmd->SetRange("WorldX>0.");
  fWorldSizeXCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWorldSizeXCmd->SetToBeBroadcasted(false);

  fWorldSizeYCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWorldY", this);
  fWorldSizeYCmd->SetUnitCategory("Length");
  fWorldSizeYCmd->SetParameterName("WorldY", false);
  fWorldSizeYCmd->SetRange("WorldY>0.");
  fWorldSizeYCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWorldSizeYCmd->SetToBeBroadcasted(false);

  fWorldSizeZCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWorldZ", this);
  fWorldSizeZCmd->SetUnitCategory("Length");
  fWorldSizeZCmd->SetParameterName("WorldZ", false);
  fWorldSizeZCmd->SetRange("WorldZ>0.");
  fWorldSizeZCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWorldSizeZCmd->SetToBeBroadcasted(false);
  fWindowMatCmd = new G4UIcmdWithAString("/MySimulation/det/setWindowMaterial", this);
  fWindowMatCmd->SetGuidance("Select Material of the Window.");
  fWindowMatCmd->SetParameterName("choice", false);
  fWindowMatCmd->AvailableForStates(G4State_PreInit, G4State_Idle);

  fWindowSizeRCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWindowX", this);
  fWindowSizeRCmd->SetUnitCategory("Length");
  fWindowSizeRCmd->SetParameterName("WindowX", false);
  fWindowSizeRCmd->SetRange("WindowX>0.");
  fWindowSizeRCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWindowSizeRCmd->SetToBeBroadcasted(false);

  fWindowSizeHCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWindowY", this);
  fWindowSizeHCmd->SetUnitCategory("Length");
  fWindowSizeHCmd->SetParameterName("WindowY", false);
  fWindowSizeHCmd->SetRange("WindowY>0.");
  fWindowSizeHCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWindowSizeHCmd->SetToBeBroadcasted(false);
/*
  fWindowSizeZCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setWindowZ", this);
  fWindowSizeZCmd->SetUnitCategory("Length");
  fWindowSizeZCmd->SetParameterName("WindowZ", false);
  fWindowSizeZCmd->SetRange("WindowZ>0.");
  fWindowSizeZCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fWindowSizeZCmd->SetToBeBroadcasted(false);
  */
  fGasMatCmd = new G4UIcmdWithAString("/MySimulation/det/setGasMaterial", this);
  fGasMatCmd->SetGuidance("Select Material of the Gas.");
  fGasMatCmd->SetParameterName("choice", false);
  fGasMatCmd->AvailableForStates(G4State_PreInit, G4State_Idle);

  fGasSizeRCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setGasX", this);
  fGasSizeRCmd->SetUnitCategory("Length");
  fGasSizeRCmd->SetParameterName("GasX", false);
  fGasSizeRCmd->SetRange("GasX>0.");
  fGasSizeRCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fGasSizeRCmd->SetToBeBroadcasted(false);

  fGasSizeHCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setGasY", this);
  fGasSizeHCmd->SetUnitCategory("Length");
  fGasSizeHCmd->SetParameterName("GasY", false);
  fGasSizeHCmd->SetRange("GasY>0.");
  fGasSizeHCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fGasSizeHCmd->SetToBeBroadcasted(false);
/*
  fGasSizeZCmd = new G4UIcmdWithADoubleAndUnit("/MySimulation/det/setGasZ", this);
  fGasSizeZCmd->SetUnitCategory("Length");
  fGasSizeZCmd->SetParameterName("GasZ", false);
  fGasSizeZCmd->SetRange("GasZ>0.");
  fGasSizeZCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
  fGasSizeZCmd->SetToBeBroadcasted(false);
 */

  fUpdateCmd = new G4UIcmdWithoutParameter("/MySimulation/det/update", this);
  fUpdateCmd->SetGuidance("Update calorimeter geometry.");
  fUpdateCmd->SetGuidance("This command MUST be applied before \"beamOn\" ");
  fUpdateCmd->SetGuidance("if you changed geometrical value(s).");
  fUpdateCmd->AvailableForStates(G4State_Idle);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

MyDetectorMessenger::~MyDetectorMessenger()
{
  delete fWorldSizeZCmd; 
  delete fWorldSizeYCmd;
  delete fWorldSizeXCmd; 
  delete fWorldMatCmd; 
  //delete fWindowSizeZCmd; 
  delete fWindowSizeHCmd;
  delete fWindowSizeRCmd; 
  delete fWindowMatCmd; 
  //delete fGasSizeZCmd; 
  delete fGasSizeHCmd;
  delete fGasSizeRCmd; 
  delete fGasMatCmd; 


  delete fUpdateCmd;
  delete fDetDirectory;
  delete fMyDirectory;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void MyDetectorMessenger::SetNewValue(G4UIcommand *command, G4String newValue)
{
  if (verbose)
    G4cout << "void MyDetectorMessenger::SetNewValue(G4UIcommand* command,G4String newValue)" << G4endl;

  if (command == fWorldSizeXCmd)
    fDetectorConstruction->SetWorldSizeHalfX(0.5*fWorldSizeXCmd->GetNewDoubleValue(newValue));
  if (command == fWorldSizeYCmd)
    fDetectorConstruction->SetWorldSizeHalfY(0.5*fWorldSizeYCmd->GetNewDoubleValue(newValue));
  if (command == fWorldSizeZCmd)
    fDetectorConstruction->SetWorldSizeHalfZ(0.5*fWorldSizeZCmd->GetNewDoubleValue(newValue));
  if (command == fWorldMatCmd)
    fDetectorConstruction->SetMaterial(WORLD, newValue);
  if (command == fWindowSizeRCmd)
    fDetectorConstruction->SetWindowSizeHalfR(0.5*fWindowSizeRCmd->GetNewDoubleValue(newValue));
  if (command == fWindowSizeHCmd)
    fDetectorConstruction->SetWindowSizeHalfH(0.5*fWindowSizeHCmd->GetNewDoubleValue(newValue));
  /*if (command == fWindowSizeZCmd)
    fDetectorConstruction->SetWindowSizeHalfZ(0.5*fWindowSizeZCmd->GetNewDoubleValue(newValue));*/
  if (command == fWindowMatCmd)
    fDetectorConstruction->SetMaterial(WINDOW, newValue);
  if (command == fGasSizeRCmd)
    fDetectorConstruction->SetGasSizeHalfR(0.5*fGasSizeRCmd->GetNewDoubleValue(newValue));
  if (command == fGasSizeHCmd)
    fDetectorConstruction->SetGasSizeHalfH(0.5*fGasSizeHCmd->GetNewDoubleValue(newValue));
  /*if (command == fGasSizeZCmd)
    fDetectorConstruction->SetGasSizeHalfZ(0.5*fGasSizeZCmd->GetNewDoubleValue(newValue));*/
  if (command == fGasMatCmd)
    fDetectorConstruction->SetMaterial(GAS, newValue);


  if (command == fUpdateCmd)
    fDetectorConstruction->Update();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
