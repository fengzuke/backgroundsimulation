//*********************************************
//  This is auto generated by G4gen 0.6
//                                  author:Qian

#include "MyAnalysisManager.hh"
#include "SimEvent.h"
#include "SimTrack.h"
#include "Verbose.hh"
#include "MyGunAction.hh"
#include "SimDeposit.h"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

MyAnalysisManager *MyAnalysisManager::fInstance = 0;

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

MyAnalysisManager::MyAnalysisManager()
{
    if (verbose)
        G4cout << "====>MyAnalysisManager::MyAnalysisManager()" << G4endl;

    fFileName = TString("tmp.root");
    fRootFp = NULL;
    fTree = NULL;
    fEvent = NULL;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void MyAnalysisManager::BeginOfRunAction()
{
    if (verbose)
        G4cout << "====>MyAnalysisManager::BeginOfRunAction()" << G4endl;

    fRootFp = new TFile(fFileName, "recreate");
    if (!fRootFp)
    {
        G4cout << "\n====>MyAnalysisManager::BeginOfRunAction(): "
               << "cannot open " << fFileName << G4endl;
        return;
    }

    fEvent = new SimEvent();
    fTree = new TTree("sim", "Tree of data events");
    fTree->Branch("SimEvent", "SimEvent", &fEvent, 640000, 0);

	//particleNumber=0;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void MyAnalysisManager::EndOfRunAction()
{
    MyGunAction *fAction = MyGunAction::GetInstance();
    G4double Energy = 0;
    G4double shootX = 0;
    G4double shootY = 0;
    G4double shootZ = 0;
    G4double Vx = 0;
    G4double Vy = 0;
    G4double Vz = 0;
    G4double Px = 0;
    G4double Py = 0;
    G4double Pz = 0;
    Energy = fAction->GetGunEnergy();
    shootX = fAction->GetGunX();
    shootY = fAction->GetGunY();
    shootZ = fAction->GetGunZ();
    Vx = fAction->GetGunVx();
    Vy = fAction->GetGunVy();
    Vz = fAction->GetGunVz();
    Px = fAction->GetGunPx();
    Py = fAction->GetGunPy();
    Pz = fAction->GetGunPz();
    double PID = fAction->GetdonPDGID();

    //G4cout << "_============  " << Energy << G4endl;
    ntuple = new TNtuple("Const", "Store const information", "Energy:PID:X:Y:Z:Vx:Vy:Vz:Px:Py:Pz");
    ntuple->Fill(Energy, PID, shootX, shootY, shootZ, Vx, Vy, Vz, Px, Py, Pz);

    if (verbose)
        G4cout << "====>MyAnalysisManager::EndOfRunAction()" << G4endl;

    if (!fRootFp)
    {
        G4cout << "\n====>MyAnalysisManager::EndOfRunAction(): "
               << "cannot open " << fFileName << G4endl;
        return;
    }

    G4cout << "\n====>In total " << fTree->GetEntries() << " Events have been stored." << G4endl;
	
    fRootFp->Write();
    fRootFp->Close();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void MyAnalysisManager::BeginOfEventAction(const G4Event *evt)
{
    if (verbose)
        G4cout << "====>MyAnalysisManager::BeginOfEventAction()" << G4endl;

    fEvent->MyClear();
	/*particleNumber++;
	if (particleNumber % 10000 == 0)
		G4cout<<"!==--==--== "<<particleNumber<<G4endl;
	*/
}	

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void MyAnalysisManager::EndOfEventAction(const G4Event *)
{
	//G4cout<<"the ID "<<evt->GetEventID()<<G4endl;
    if (verbose)
        G4cout << "====>MyAnalysisManager::EndOfEventAction()" << G4endl;

	MyGunAction *fAction = MyGunAction::GetInstance();
	fEvent->SetNewPolarizationX(fAction->GetNewPolarX());
	fEvent->SetNewPolarizationY(fAction->GetNewPolarY());
	fEvent->SetGaussCheck(fAction->GetGaussC());
    // Fill tree
    if (fEvent->GetGasSDTrackMap()->GetSize() != 0 && fEvent->GetTrueEnergy() <= 0.01 )
	{ fTree->Fill();}       

    fEvent->MyClear();

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
/*void MyAnalysisManager::DoReserve()
{
    if (verbose)
        G4cout << "====>MyAnalysisManager::DoReserve()" << G4endl;
	fGarfield->Fill();
	fGarfieldEvent->MyPartClear();
} */
