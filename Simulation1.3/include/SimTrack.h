//*********************************************
//  This is auto generated by G4gen 0.6
//                                  author:Qian

#ifndef SimTrack_h
#define SimTrack_h

#include "TObject.h"
#include <vector>
#include <iostream>

#include "SimDeposit.h"

class SimTrack : public TObject
{

  public:
    SimTrack() { MyClear(); }
    virtual ~SimTrack() {}

    inline void MyClear();

    //______________
    // === Getter ==
    int GetPDGID() { return pdg_id; }
    int GetTrackID() { return track_id; }
    double GetInitMass() { return init_mass; }
    double GetInitEk() { return init_Ek; }

    // == Init ==
    double GetInitPx() { return init_px; }
    double GetInitPy() { return init_py; }
    double GetInitPz() { return init_pz; }
    double GetInitX() { return init_x; }
    double GetInitY() { return init_y; }
    double GetInitZ() { return init_z; }
    double GetInitT() { return init_t; }

    // == Exit ==
    double GetExitPx() { return exit_px; }
    double GetExitPy() { return exit_py; }
    double GetExitPz() { return exit_pz; }
    double GetExitX() { return exit_x; }
    double GetExitY() { return exit_y; }
    double GetExitZ() { return exit_z; }
    double GetExitT() { return exit_t; }
    double GetTrackLength() { return track_length; }

    double GetEdep() { return tEdep; }

    const std::vector<Int_t> GetStepIdx() const { return stepIdx; }

    //_____________
    // == Setter ==
    void SetPDGID(int val) { pdg_id = val; }
    void SetTrackID(int val) { track_id = val; }
    void SetInitMass(double val) { init_mass = val; }
    void SetInitEk(double val) { init_Ek = val; }

    // == Init ==
    void SetInitPx(double val) { init_px = val; }
    void SetInitPy(double val) { init_py = val; }
    void SetInitPz(double val) { init_pz = val; }
    void SetInitX(double val) { init_x = val; }
    void SetInitY(double val) { init_y = val; }
    void SetInitZ(double val) { init_z = val; }
    void SetInitT(double val) { init_t = val; }

    // == Exit ==
    void SetExitPx(double val) { exit_px = val; }
    void SetExitPy(double val) { exit_py = val; }
    void SetExitPz(double val) { exit_pz = val; }
    void SetExitX(double val) { exit_x = val; }
    void SetExitY(double val) { exit_y = val; }
    void SetExitZ(double val) { exit_z = val; }
    void SetExitT(double val) { exit_t = val; }
    void SetTrackLength(double val) { track_length = val; }

    void SetEdep(double val) { tEdep = val; }

    void SetStepIdx(const std::vector<Int_t> &val) { stepIdx = val; }

    // == other functions ==
    void addDeposit(int idx, SimDeposit *aDep)
    {
        stepIdx.push_back(idx);
        tEdep += aDep->GetEdep();
		//std::cout<<"thr energy is "<<tEdep<<std::endl;
        track_length += aDep->GetStepLength();
    }

  private:
    Int_t pdg_id;
    Int_t track_id;

    // == Init ==
    Double_t init_mass;
    Double_t init_Ek;
    Double_t init_px;
    Double_t init_py;
    Double_t init_pz;
    Double_t init_x;
    Double_t init_y;
    Double_t init_z;
    Double_t init_t;

    // == Exit ==
    Double_t exit_px;
    Double_t exit_py;
    Double_t exit_pz;
    Double_t exit_x;
    Double_t exit_y;
    Double_t exit_z;
    Double_t exit_t;

    Double_t track_length;

    Double_t tEdep;

    std::vector<Int_t> stepIdx;

    ClassDef(SimTrack, 1)
};

inline void SimTrack::MyClear()
{
    pdg_id = 0;
    track_id = -1;

    // == Init ==
    init_mass = 0;
    init_Ek = 0;
    init_px = 0;
    init_py = 0;
    init_pz = 0;
    init_x = 0;
    init_y = 0;
    init_z = 0;
    init_t = 0;

    // == Exit ==
    exit_px = 0;
    exit_py = 0;
    exit_pz = 0;
    exit_x = 0;
    exit_y = 0;
    exit_z = 0;
    exit_t = 0;
    track_length = 0.;

    // == Visible or Deposit Energy Related ==
    tEdep = 0;

    stepIdx.clear();
}

#endif
